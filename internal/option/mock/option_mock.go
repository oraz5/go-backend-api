// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/entity/option.go

// Package optionMock is a generated GoMock package.
package optionMock

import (
	context "context"
	entity "go-store/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOptionRepository is a mock of OptionRepository interface.
type MockOptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOptionRepositoryMockRecorder
}

// MockOptionRepositoryMockRecorder is the mock recorder for MockOptionRepository.
type MockOptionRepositoryMockRecorder struct {
	mock *MockOptionRepository
}

// NewMockOptionRepository creates a new mock instance.
func NewMockOptionRepository(ctrl *gomock.Controller) *MockOptionRepository {
	mock := &MockOptionRepository{ctrl: ctrl}
	mock.recorder = &MockOptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOptionRepository) EXPECT() *MockOptionRepositoryMockRecorder {
	return m.recorder
}

// CreateOption mocks base method.
func (m *MockOptionRepository) CreateOption(ctx context.Context, option entity.Option) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOption", ctx, option)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOption indicates an expected call of CreateOption.
func (mr *MockOptionRepositoryMockRecorder) CreateOption(ctx, option interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOption", reflect.TypeOf((*MockOptionRepository)(nil).CreateOption), ctx, option)
}

// CreateOptionValue mocks base method.
func (m *MockOptionRepository) CreateOptionValue(ctx context.Context, optionValue entity.OptionValue) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOptionValue", ctx, optionValue)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOptionValue indicates an expected call of CreateOptionValue.
func (mr *MockOptionRepositoryMockRecorder) CreateOptionValue(ctx, optionValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOptionValue", reflect.TypeOf((*MockOptionRepository)(nil).CreateOptionValue), ctx, optionValue)
}

// CreateSkuValue mocks base method.
func (m *MockOptionRepository) CreateSkuValue(ctx context.Context, skuID, optionId, optionValueId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSkuValue", ctx, skuID, optionId, optionValueId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSkuValue indicates an expected call of CreateSkuValue.
func (mr *MockOptionRepositoryMockRecorder) CreateSkuValue(ctx, skuID, optionId, optionValueId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSkuValue", reflect.TypeOf((*MockOptionRepository)(nil).CreateSkuValue), ctx, skuID, optionId, optionValueId)
}

// GetOption mocks base method.
func (m *MockOptionRepository) GetOption(ctx context.Context, optionID int) (*entity.Option, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOption", ctx, optionID)
	ret0, _ := ret[0].(*entity.Option)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOption indicates an expected call of GetOption.
func (mr *MockOptionRepositoryMockRecorder) GetOption(ctx, optionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOption", reflect.TypeOf((*MockOptionRepository)(nil).GetOption), ctx, optionID)
}

// GetOptionByCat mocks base method.
func (m *MockOptionRepository) GetOptionByCat(ctx context.Context, categoryId int) ([]*entity.Option, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptionByCat", ctx, categoryId)
	ret0, _ := ret[0].([]*entity.Option)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOptionByCat indicates an expected call of GetOptionByCat.
func (mr *MockOptionRepositoryMockRecorder) GetOptionByCat(ctx, categoryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptionByCat", reflect.TypeOf((*MockOptionRepository)(nil).GetOptionByCat), ctx, categoryId)
}

// GetOptionBySkuValue mocks base method.
func (m *MockOptionRepository) GetOptionBySkuValue(ctx context.Context, skuValueID int) (*entity.OptionJson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptionBySkuValue", ctx, skuValueID)
	ret0, _ := ret[0].(*entity.OptionJson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOptionBySkuValue indicates an expected call of GetOptionBySkuValue.
func (mr *MockOptionRepositoryMockRecorder) GetOptionBySkuValue(ctx, skuValueID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptionBySkuValue", reflect.TypeOf((*MockOptionRepository)(nil).GetOptionBySkuValue), ctx, skuValueID)
}

// GetOptionValue mocks base method.
func (m *MockOptionRepository) GetOptionValue(ctx context.Context, optionValueID int) (*entity.OptionValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptionValue", ctx, optionValueID)
	ret0, _ := ret[0].(*entity.OptionValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOptionValue indicates an expected call of GetOptionValue.
func (mr *MockOptionRepositoryMockRecorder) GetOptionValue(ctx, optionValueID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptionValue", reflect.TypeOf((*MockOptionRepository)(nil).GetOptionValue), ctx, optionValueID)
}

// GetOptionValueByOptId mocks base method.
func (m *MockOptionRepository) GetOptionValueByOptId(ctx context.Context, optionID int) ([]*entity.OptionValueJson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptionValueByOptId", ctx, optionID)
	ret0, _ := ret[0].([]*entity.OptionValueJson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOptionValueByOptId indicates an expected call of GetOptionValueByOptId.
func (mr *MockOptionRepositoryMockRecorder) GetOptionValueByOptId(ctx, optionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptionValueByOptId", reflect.TypeOf((*MockOptionRepository)(nil).GetOptionValueByOptId), ctx, optionID)
}

// GetSkuValue mocks base method.
func (m *MockOptionRepository) GetSkuValue(ctx context.Context, skuID int) ([]*entity.SkuValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkuValue", ctx, skuID)
	ret0, _ := ret[0].([]*entity.SkuValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkuValue indicates an expected call of GetSkuValue.
func (mr *MockOptionRepositoryMockRecorder) GetSkuValue(ctx, skuID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkuValue", reflect.TypeOf((*MockOptionRepository)(nil).GetSkuValue), ctx, skuID)
}

// RemoveOption mocks base method.
func (m *MockOptionRepository) RemoveOption(ctx context.Context, optionID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOption", ctx, optionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOption indicates an expected call of RemoveOption.
func (mr *MockOptionRepositoryMockRecorder) RemoveOption(ctx, optionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOption", reflect.TypeOf((*MockOptionRepository)(nil).RemoveOption), ctx, optionID)
}

// RemoveOptionValue mocks base method.
func (m *MockOptionRepository) RemoveOptionValue(ctx context.Context, optionValueID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOptionValue", ctx, optionValueID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOptionValue indicates an expected call of RemoveOptionValue.
func (mr *MockOptionRepositoryMockRecorder) RemoveOptionValue(ctx, optionValueID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOptionValue", reflect.TypeOf((*MockOptionRepository)(nil).RemoveOptionValue), ctx, optionValueID)
}

// RemoveSkuValue mocks base method.
func (m *MockOptionRepository) RemoveSkuValue(ctx context.Context, skuValueID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSkuValue", ctx, skuValueID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSkuValue indicates an expected call of RemoveSkuValue.
func (mr *MockOptionRepositoryMockRecorder) RemoveSkuValue(ctx, skuValueID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSkuValue", reflect.TypeOf((*MockOptionRepository)(nil).RemoveSkuValue), ctx, skuValueID)
}

// UpdateOption mocks base method.
func (m *MockOptionRepository) UpdateOption(ctx context.Context, option entity.Option) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOption", ctx, option)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOption indicates an expected call of UpdateOption.
func (mr *MockOptionRepositoryMockRecorder) UpdateOption(ctx, option interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOption", reflect.TypeOf((*MockOptionRepository)(nil).UpdateOption), ctx, option)
}

// UpdateOptionValue mocks base method.
func (m *MockOptionRepository) UpdateOptionValue(ctx context.Context, optionValue entity.OptionValue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOptionValue", ctx, optionValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOptionValue indicates an expected call of UpdateOptionValue.
func (mr *MockOptionRepositoryMockRecorder) UpdateOptionValue(ctx, optionValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOptionValue", reflect.TypeOf((*MockOptionRepository)(nil).UpdateOptionValue), ctx, optionValue)
}
