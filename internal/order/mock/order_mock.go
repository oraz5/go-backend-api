// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/entity/order.go

// Package orderMock is a generated GoMock package.
package orderMock

import (
	context "context"
	entity "go-store/internal/entity"
	dto "go-store/internal/order/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockOrderUsecase is a mock of OrderUsecase interface.
type MockOrderUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockOrderUsecaseMockRecorder
}

// MockOrderUsecaseMockRecorder is the mock recorder for MockOrderUsecase.
type MockOrderUsecaseMockRecorder struct {
	mock *MockOrderUsecase
}

// NewMockOrderUsecase creates a new mock instance.
func NewMockOrderUsecase(ctrl *gomock.Controller) *MockOrderUsecase {
	mock := &MockOrderUsecase{ctrl: ctrl}
	mock.recorder = &MockOrderUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderUsecase) EXPECT() *MockOrderUsecaseMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderUsecase) CreateOrder(ctx context.Context, claim *entity.Claims, order *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, claim, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderUsecaseMockRecorder) CreateOrder(ctx, claim, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderUsecase)(nil).CreateOrder), ctx, claim, order)
}

// DeleteOrder mocks base method.
func (m *MockOrderUsecase) DeleteOrder(ctx context.Context, order *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockOrderUsecaseMockRecorder) DeleteOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOrderUsecase)(nil).DeleteOrder), ctx, order)
}

// GetOrderById mocks base method.
func (m *MockOrderUsecase) GetOrderById(ctx context.Context, claim *entity.Claims, orderId string) (*entity.OrderJson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderById", ctx, claim, orderId)
	ret0, _ := ret[0].(*entity.OrderJson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderById indicates an expected call of GetOrderById.
func (mr *MockOrderUsecaseMockRecorder) GetOrderById(ctx, claim, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderById", reflect.TypeOf((*MockOrderUsecase)(nil).GetOrderById), ctx, claim, orderId)
}

// GetOrders mocks base method.
func (m *MockOrderUsecase) GetOrders(ctx context.Context, claim *entity.Claims, filter *dto.OrderListFilter, limit, offset int) ([]*entity.OrderJson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, claim, filter, limit, offset)
	ret0, _ := ret[0].([]*entity.OrderJson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderUsecaseMockRecorder) GetOrders(ctx, claim, filter, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderUsecase)(nil).GetOrders), ctx, claim, filter, limit, offset)
}

// UpdateOrder mocks base method.
func (m *MockOrderUsecase) UpdateOrder(ctx context.Context, claim *entity.Claims, order *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, claim, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderUsecaseMockRecorder) UpdateOrder(ctx, claim, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderUsecase)(nil).UpdateOrder), ctx, claim, order)
}

// UpdateOrderStatus mocks base method.
func (m *MockOrderUsecase) UpdateOrderStatus(ctx context.Context, claim *entity.Claims, order *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, claim, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockOrderUsecaseMockRecorder) UpdateOrderStatus(ctx, claim, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockOrderUsecase)(nil).UpdateOrderStatus), ctx, claim, order)
}

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderRepository) CreateOrder(ctx context.Context, order *entity.Order, txId int) (*uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order, txId)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderRepositoryMockRecorder) CreateOrder(ctx, order, txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderRepository)(nil).CreateOrder), ctx, order, txId)
}

// CreateOrderItem mocks base method.
func (m *MockOrderRepository) CreateOrderItem(ctx context.Context, orderId uuid.UUID, userId, txId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderItem", ctx, orderId, userId, txId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrderItem indicates an expected call of CreateOrderItem.
func (mr *MockOrderRepositoryMockRecorder) CreateOrderItem(ctx, orderId, userId, txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderItem", reflect.TypeOf((*MockOrderRepository)(nil).CreateOrderItem), ctx, orderId, userId, txId)
}

// DeleteOrder mocks base method.
func (m *MockOrderRepository) DeleteOrder(ctx context.Context, order *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockOrderRepositoryMockRecorder) DeleteOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOrderRepository)(nil).DeleteOrder), ctx, order)
}

// GetItem mocks base method.
func (m *MockOrderRepository) GetItem(ctx context.Context, orderId uuid.UUID) ([]*entity.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, orderId)
	ret0, _ := ret[0].([]*entity.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockOrderRepositoryMockRecorder) GetItem(ctx, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockOrderRepository)(nil).GetItem), ctx, orderId)
}

// GetOrder mocks base method.
func (m *MockOrderRepository) GetOrder(ctx context.Context, orderId string) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, orderId)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderRepositoryMockRecorder) GetOrder(ctx, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderRepository)(nil).GetOrder), ctx, orderId)
}

// GetOrders mocks base method.
func (m *MockOrderRepository) GetOrders(ctx context.Context, filterMap map[string]string, limit, offset, id int) ([]*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, filterMap, limit, offset, id)
	ret0, _ := ret[0].([]*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderRepositoryMockRecorder) GetOrders(ctx, filterMap, limit, offset, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderRepository)(nil).GetOrders), ctx, filterMap, limit, offset, id)
}

// NewTxId mocks base method.
func (m *MockOrderRepository) NewTxId(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTxId", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTxId indicates an expected call of NewTxId.
func (mr *MockOrderRepositoryMockRecorder) NewTxId(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTxId", reflect.TypeOf((*MockOrderRepository)(nil).NewTxId), ctx)
}

// TxEnd mocks base method.
func (m *MockOrderRepository) TxEnd(ctx context.Context, txId int, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxEnd", ctx, txId, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// TxEnd indicates an expected call of TxEnd.
func (mr *MockOrderRepositoryMockRecorder) TxEnd(ctx, txId, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxEnd", reflect.TypeOf((*MockOrderRepository)(nil).TxEnd), ctx, txId, err)
}

// UpdateOrder mocks base method.
func (m *MockOrderRepository) UpdateOrder(ctx context.Context, order *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderRepositoryMockRecorder) UpdateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderRepository)(nil).UpdateOrder), ctx, order)
}

// UpdateOrderStatus mocks base method.
func (m *MockOrderRepository) UpdateOrderStatus(ctx context.Context, order *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockOrderRepositoryMockRecorder) UpdateOrderStatus(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockOrderRepository)(nil).UpdateOrderStatus), ctx, order)
}

// MockOrderRedisRepository is a mock of OrderRedisRepository interface.
type MockOrderRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRedisRepositoryMockRecorder
}

// MockOrderRedisRepositoryMockRecorder is the mock recorder for MockOrderRedisRepository.
type MockOrderRedisRepositoryMockRecorder struct {
	mock *MockOrderRedisRepository
}

// NewMockOrderRedisRepository creates a new mock instance.
func NewMockOrderRedisRepository(ctrl *gomock.Controller) *MockOrderRedisRepository {
	mock := &MockOrderRedisRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRedisRepository) EXPECT() *MockOrderRedisRepositoryMockRecorder {
	return m.recorder
}

// GetItem mocks base method.
func (m *MockOrderRedisRepository) GetItem(ctx context.Context, order_id uuid.UUID) ([]*entity.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, order_id)
	ret0, _ := ret[0].([]*entity.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockOrderRedisRepositoryMockRecorder) GetItem(ctx, order_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockOrderRedisRepository)(nil).GetItem), ctx, order_id)
}

// GetOrderQuery mocks base method.
func (m *MockOrderRedisRepository) GetOrderQuery(ctx context.Context, limit, offset, id int, dbSchema string) ([]*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderQuery", ctx, limit, offset, id, dbSchema)
	ret0, _ := ret[0].([]*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderQuery indicates an expected call of GetOrderQuery.
func (mr *MockOrderRedisRepositoryMockRecorder) GetOrderQuery(ctx, limit, offset, id, dbSchema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderQuery", reflect.TypeOf((*MockOrderRedisRepository)(nil).GetOrderQuery), ctx, limit, offset, id, dbSchema)
}

// GetOrderSuperadminQuery mocks base method.
func (m *MockOrderRedisRepository) GetOrderSuperadminQuery(ctx context.Context, limit, offset int, dbSchema string) ([]*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderSuperadminQuery", ctx, limit, offset, dbSchema)
	ret0, _ := ret[0].([]*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderSuperadminQuery indicates an expected call of GetOrderSuperadminQuery.
func (mr *MockOrderRedisRepositoryMockRecorder) GetOrderSuperadminQuery(ctx, limit, offset, dbSchema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderSuperadminQuery", reflect.TypeOf((*MockOrderRedisRepository)(nil).GetOrderSuperadminQuery), ctx, limit, offset, dbSchema)
}
