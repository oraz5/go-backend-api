// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/entity/product.go

// Package productMock is a generated GoMock package.
package productMock

import (
	context "context"
	entity "go-store/internal/entity"
	dto "go-store/internal/product/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductUsecase is a mock of ProductUsecase interface.
type MockProductUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockProductUsecaseMockRecorder
}

// MockProductUsecaseMockRecorder is the mock recorder for MockProductUsecase.
type MockProductUsecaseMockRecorder struct {
	mock *MockProductUsecase
}

// NewMockProductUsecase creates a new mock instance.
func NewMockProductUsecase(ctrl *gomock.Controller) *MockProductUsecase {
	mock := &MockProductUsecase{ctrl: ctrl}
	mock.recorder = &MockProductUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductUsecase) EXPECT() *MockProductUsecaseMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockProductUsecase) CreateProduct(ctx context.Context, prod *entity.Product) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, prod)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductUsecaseMockRecorder) CreateProduct(ctx, prod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductUsecase)(nil).CreateProduct), ctx, prod)
}

// CreateProductOption mocks base method.
func (m *MockProductUsecase) CreateProductOption(ctx context.Context, skuID, optionId, optionValueId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductOption", ctx, skuID, optionId, optionValueId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProductOption indicates an expected call of CreateProductOption.
func (mr *MockProductUsecaseMockRecorder) CreateProductOption(ctx, skuID, optionId, optionValueId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductOption", reflect.TypeOf((*MockProductUsecase)(nil).CreateProductOption), ctx, skuID, optionId, optionValueId)
}

// CreateSku mocks base method.
func (m *MockProductUsecase) CreateSku(ctx context.Context, prod *entity.Sku) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSku", ctx, prod)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSku indicates an expected call of CreateSku.
func (mr *MockProductUsecaseMockRecorder) CreateSku(ctx, prod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSku", reflect.TypeOf((*MockProductUsecase)(nil).CreateSku), ctx, prod)
}

// DeleteProduct mocks base method.
func (m *MockProductUsecase) DeleteProduct(ctx context.Context, productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductUsecaseMockRecorder) DeleteProduct(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductUsecase)(nil).DeleteProduct), ctx, productID)
}

// DeleteProductOption mocks base method.
func (m *MockProductUsecase) DeleteProductOption(ctx context.Context, skuValueId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductOption", ctx, skuValueId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductOption indicates an expected call of DeleteProductOption.
func (mr *MockProductUsecaseMockRecorder) DeleteProductOption(ctx, skuValueId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductOption", reflect.TypeOf((*MockProductUsecase)(nil).DeleteProductOption), ctx, skuValueId)
}

// DeleteSku mocks base method.
func (m *MockProductUsecase) DeleteSku(ctx context.Context, skuId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSku", ctx, skuId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSku indicates an expected call of DeleteSku.
func (mr *MockProductUsecaseMockRecorder) DeleteSku(ctx, skuId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSku", reflect.TypeOf((*MockProductUsecase)(nil).DeleteSku), ctx, skuId)
}

// GetProductSkus mocks base method.
func (m *MockProductUsecase) GetProductSkus(ctx context.Context, limit, offset, categoryID int) (*entity.ResultProductJSon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductSkus", ctx, limit, offset, categoryID)
	ret0, _ := ret[0].(*entity.ResultProductJSon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductSkus indicates an expected call of GetProductSkus.
func (mr *MockProductUsecaseMockRecorder) GetProductSkus(ctx, limit, offset, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductSkus", reflect.TypeOf((*MockProductUsecase)(nil).GetProductSkus), ctx, limit, offset, categoryID)
}

// GetSingleProduct mocks base method.
func (m *MockProductUsecase) GetSingleProduct(ctx context.Context, skuCode string) (*entity.SkuJson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleProduct", ctx, skuCode)
	ret0, _ := ret[0].(*entity.SkuJson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleProduct indicates an expected call of GetSingleProduct.
func (mr *MockProductUsecaseMockRecorder) GetSingleProduct(ctx, skuCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleProduct", reflect.TypeOf((*MockProductUsecase)(nil).GetSingleProduct), ctx, skuCode)
}

// GetSku mocks base method.
func (m *MockProductUsecase) GetSku(ctx context.Context, limit, offset int, filter *dto.ProductListFilter) (*entity.ResultSkuJSon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSku", ctx, limit, offset, filter)
	ret0, _ := ret[0].(*entity.ResultSkuJSon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSku indicates an expected call of GetSku.
func (mr *MockProductUsecaseMockRecorder) GetSku(ctx, limit, offset, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSku", reflect.TypeOf((*MockProductUsecase)(nil).GetSku), ctx, limit, offset, filter)
}

// GetSkuOption mocks base method.
func (m *MockProductUsecase) GetSkuOption(ctx context.Context, skuValueId int) (*entity.OptionJson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkuOption", ctx, skuValueId)
	ret0, _ := ret[0].(*entity.OptionJson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkuOption indicates an expected call of GetSkuOption.
func (mr *MockProductUsecaseMockRecorder) GetSkuOption(ctx, skuValueId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkuOption", reflect.TypeOf((*MockProductUsecase)(nil).GetSkuOption), ctx, skuValueId)
}

// UpdateProduct mocks base method.
func (m *MockProductUsecase) UpdateProduct(ctx context.Context, prod *entity.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, prod)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductUsecaseMockRecorder) UpdateProduct(ctx, prod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductUsecase)(nil).UpdateProduct), ctx, prod)
}

// UpdateSku mocks base method.
func (m *MockProductUsecase) UpdateSku(ctx context.Context, prod *entity.Sku) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSku", ctx, prod)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSku indicates an expected call of UpdateSku.
func (mr *MockProductUsecaseMockRecorder) UpdateSku(ctx, prod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSku", reflect.TypeOf((*MockProductUsecase)(nil).UpdateSku), ctx, prod)
}

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockProductRepository) CreateProduct(ctx context.Context, prod *entity.Product) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, prod)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductRepositoryMockRecorder) CreateProduct(ctx, prod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductRepository)(nil).CreateProduct), ctx, prod)
}

// CreateSku mocks base method.
func (m *MockProductRepository) CreateSku(ctx context.Context, sku *entity.Sku) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSku", ctx, sku)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSku indicates an expected call of CreateSku.
func (mr *MockProductRepositoryMockRecorder) CreateSku(ctx, sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSku", reflect.TypeOf((*MockProductRepository)(nil).CreateSku), ctx, sku)
}

// GetProducts mocks base method.
func (m *MockProductRepository) GetProducts(ctx context.Context, limit, offset, categoryID int) ([]*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx, limit, offset, categoryID)
	ret0, _ := ret[0].([]*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockProductRepositoryMockRecorder) GetProducts(ctx, limit, offset, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockProductRepository)(nil).GetProducts), ctx, limit, offset, categoryID)
}

// GetSingleProduct mocks base method.
func (m *MockProductRepository) GetSingleProduct(ctx context.Context, skuCode string, skuId int) (*entity.Sku, *entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleProduct", ctx, skuCode, skuId)
	ret0, _ := ret[0].(*entity.Sku)
	ret1, _ := ret[1].(*entity.Product)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSingleProduct indicates an expected call of GetSingleProduct.
func (mr *MockProductRepositoryMockRecorder) GetSingleProduct(ctx, skuCode, skuId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleProduct", reflect.TypeOf((*MockProductRepository)(nil).GetSingleProduct), ctx, skuCode, skuId)
}

// GetSku mocks base method.
func (m *MockProductRepository) GetSku(ctx context.Context, limit, offset int, filter map[string]string) ([]*entity.Sku, []*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSku", ctx, limit, offset, filter)
	ret0, _ := ret[0].([]*entity.Sku)
	ret1, _ := ret[1].([]*entity.Product)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSku indicates an expected call of GetSku.
func (mr *MockProductRepositoryMockRecorder) GetSku(ctx, limit, offset, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSku", reflect.TypeOf((*MockProductRepository)(nil).GetSku), ctx, limit, offset, filter)
}

// GetSkuByProductID mocks base method.
func (m *MockProductRepository) GetSkuByProductID(ctx context.Context, productID int) ([]*entity.Sku, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkuByProductID", ctx, productID)
	ret0, _ := ret[0].([]*entity.Sku)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkuByProductID indicates an expected call of GetSkuByProductID.
func (mr *MockProductRepositoryMockRecorder) GetSkuByProductID(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkuByProductID", reflect.TypeOf((*MockProductRepository)(nil).GetSkuByProductID), ctx, productID)
}

// RemoveProduct mocks base method.
func (m *MockProductRepository) RemoveProduct(ctx context.Context, productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProduct", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProduct indicates an expected call of RemoveProduct.
func (mr *MockProductRepositoryMockRecorder) RemoveProduct(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProduct", reflect.TypeOf((*MockProductRepository)(nil).RemoveProduct), ctx, productID)
}

// RemoveSku mocks base method.
func (m *MockProductRepository) RemoveSku(ctx context.Context, skuId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSku", ctx, skuId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSku indicates an expected call of RemoveSku.
func (mr *MockProductRepositoryMockRecorder) RemoveSku(ctx, skuId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSku", reflect.TypeOf((*MockProductRepository)(nil).RemoveSku), ctx, skuId)
}

// UpdateProduct mocks base method.
func (m *MockProductRepository) UpdateProduct(ctx context.Context, prod *entity.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, prod)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductRepositoryMockRecorder) UpdateProduct(ctx, prod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductRepository)(nil).UpdateProduct), ctx, prod)
}

// UpdateSku mocks base method.
func (m *MockProductRepository) UpdateSku(ctx context.Context, sku *entity.Sku) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSku", ctx, sku)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSku indicates an expected call of UpdateSku.
func (mr *MockProductRepositoryMockRecorder) UpdateSku(ctx, sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSku", reflect.TypeOf((*MockProductRepository)(nil).UpdateSku), ctx, sku)
}

// MockProdRedisRepository is a mock of ProdRedisRepository interface.
type MockProdRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProdRedisRepositoryMockRecorder
}

// MockProdRedisRepositoryMockRecorder is the mock recorder for MockProdRedisRepository.
type MockProdRedisRepositoryMockRecorder struct {
	mock *MockProdRedisRepository
}

// NewMockProdRedisRepository creates a new mock instance.
func NewMockProdRedisRepository(ctrl *gomock.Controller) *MockProdRedisRepository {
	mock := &MockProdRedisRepository{ctrl: ctrl}
	mock.recorder = &MockProdRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProdRedisRepository) EXPECT() *MockProdRedisRepositoryMockRecorder {
	return m.recorder
}

// GetProdByIDCtx mocks base method.
func (m *MockProdRedisRepository) GetProdByIDCtx(ctx context.Context, key string) (*entity.SkuJson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProdByIDCtx", ctx, key)
	ret0, _ := ret[0].(*entity.SkuJson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProdByIDCtx indicates an expected call of GetProdByIDCtx.
func (mr *MockProdRedisRepositoryMockRecorder) GetProdByIDCtx(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProdByIDCtx", reflect.TypeOf((*MockProdRedisRepository)(nil).GetProdByIDCtx), ctx, key)
}

// GetProducts mocks base method.
func (m *MockProdRedisRepository) GetProducts(ctx context.Context, limit, offset, category int) ([]*entity.ProductJson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx, limit, offset, category)
	ret0, _ := ret[0].([]*entity.ProductJson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockProdRedisRepositoryMockRecorder) GetProducts(ctx, limit, offset, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockProdRedisRepository)(nil).GetProducts), ctx, limit, offset, category)
}

// GetSku mocks base method.
func (m *MockProdRedisRepository) GetSku(ctx context.Context, limit, offset, category int) ([]*entity.SkuJson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSku", ctx, limit, offset, category)
	ret0, _ := ret[0].([]*entity.SkuJson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSku indicates an expected call of GetSku.
func (mr *MockProdRedisRepositoryMockRecorder) GetSku(ctx, limit, offset, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSku", reflect.TypeOf((*MockProdRedisRepository)(nil).GetSku), ctx, limit, offset, category)
}

// GetSkuCount mocks base method.
func (m *MockProdRedisRepository) GetSkuCount(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkuCount", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkuCount indicates an expected call of GetSkuCount.
func (mr *MockProdRedisRepositoryMockRecorder) GetSkuCount(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkuCount", reflect.TypeOf((*MockProdRedisRepository)(nil).GetSkuCount), ctx, key)
}

// SetProdByIDCtx mocks base method.
func (m *MockProdRedisRepository) SetProdByIDCtx(ctx context.Context, key string, user *entity.SkuJson) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProdByIDCtx", ctx, key, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProdByIDCtx indicates an expected call of SetProdByIDCtx.
func (mr *MockProdRedisRepositoryMockRecorder) SetProdByIDCtx(ctx, key, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProdByIDCtx", reflect.TypeOf((*MockProdRedisRepository)(nil).SetProdByIDCtx), ctx, key, user)
}

// SetProdCtx mocks base method.
func (m *MockProdRedisRepository) SetProdCtx(ctx context.Context, offset, category int, prod *entity.ProductJson) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProdCtx", ctx, offset, category, prod)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProdCtx indicates an expected call of SetProdCtx.
func (mr *MockProdRedisRepositoryMockRecorder) SetProdCtx(ctx, offset, category, prod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProdCtx", reflect.TypeOf((*MockProdRedisRepository)(nil).SetProdCtx), ctx, offset, category, prod)
}

// SetSkuCount mocks base method.
func (m *MockProdRedisRepository) SetSkuCount(ctx context.Context, count, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSkuCount", ctx, count, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSkuCount indicates an expected call of SetSkuCount.
func (mr *MockProdRedisRepositoryMockRecorder) SetSkuCount(ctx, count, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSkuCount", reflect.TypeOf((*MockProdRedisRepository)(nil).SetSkuCount), ctx, count, key)
}

// SetSkuCtx mocks base method.
func (m *MockProdRedisRepository) SetSkuCtx(ctx context.Context, offset, category int, prod *entity.SkuJson) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSkuCtx", ctx, offset, category, prod)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSkuCtx indicates an expected call of SetSkuCtx.
func (mr *MockProdRedisRepositoryMockRecorder) SetSkuCtx(ctx, offset, category, prod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSkuCtx", reflect.TypeOf((*MockProdRedisRepository)(nil).SetSkuCtx), ctx, offset, category, prod)
}
